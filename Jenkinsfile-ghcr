pipeline {
	agent any
    //agent { label 'ubuntu' }
    environment {
	#VERSION = "${env.BUILD_NUMBER}"
        DOCKER_IMAGE_NAME = 'simple-java-app'
	#TAG_NAME = ${VERSION}
        GHCR_REGISTRY = 'ghcr.io/cloudbci'   
	JENKINS_URL='http://13.200.229.152:8080//'
    }
    stages {
        stage('Maven Package') {           
            steps {
                script{
                    sh "mvn clean package"
                    sh 'mv target/myweb*.war target/newapp.war'
                }
            }
        }
            
        stage('Build Docker Image') {    
            steps {
		echo "Running ${VERSION} on ${env.JENKINS_URL}"
            	//git branch: "${BRANCH}"
            	//echo "for brnach ${env.BRANCH_NAME}"
                script {
			def buildNumber = env.BUILD_NUMBER
                    	echo "Build Number: ${buildNumber}"
                    	sh "docker build -f Dockerfile-app -t ${DOCKER_IMAGE_NAME}:${TAG_NAME} ."
                }
            }
        }
	
         stage('Login to GitHub Container Registry') {
              steps {
                 script {
                     withCredentials([usernamePassword(credentialsId: 'GH_PAT_TOKEN', usernameVariable: 'GHCR_USERNAME', passwordVariable: 'MYGH_TOKEN')]) {
                     sh "echo ${MYGH_TOKEN} | docker login --username ${GHCR_USERNAME} --password-stdin ghcr.io" }
		     sh "docker tag ${DOCKER_IMAGE_NAME}:${TAG_NAME} ${GHCR_REGISTRY}/${DOCKER_IMAGE_NAME}:${TAG_NAME}"
     		     sh "docker push ${GHCR_REGISTRY}/${DOCKER_IMAGE_NAME}:${TAG_NAME}"
                 }
             }
          }  
      
             stage('Remove Previous Container'){
               steps {
                  script {
                  try{
        	        sh 'docker rm -f simple-java-app'
        	         }catch(error){
        	          //do nothing if there is an exception
                           }
                     }
          	 }
         	}

         stage('Docker deployment'){
          steps {
	      script {
                    sh 'docker run -dit -p 8081:8080 --name simple-java-app ${GHCR_REGISTRY}/${DOCKER_IMAGE_NAME}:${TAG_NAME}' 
                }
           }
         }
    }
}

    
