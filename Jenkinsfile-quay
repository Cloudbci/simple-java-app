pipeline {
    agent any

    environment {
        IMAGE_NAME = 'cloudbeeci/simple-java-app'
        TAG_NAME = 'V1.0.1'
        QUAY_REGISTRY = 'quay.io/cloudbeeci/simple-java-app'
    }

    stages {
        stage('Maven Package') {
            steps {
                script {
                    sh "mvn clean package"
                    sh 'mv target/myweb*.war target/newapp.war'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -f Dockerfile-app -t ${IMAGE_NAME}:${TAG_NAME} ."
                }
            }
        }

        stage('Login to Quay.io Repository') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'QuayRepo', usernameVariable: 'QUAY_USERNAME', passwordVariable: 'QUAY_PASSWORD')]) {
                        sh "echo ${QUAY_PASSWORD} | docker login --username ${QUAY_USERNAME} --password-stdin quay.io"
                    }
		    sh "docker tag ${IMAGE_NAME}:${TAG_NAME} ${QUAY_REGISTRY}:${TAG_NAME}"
                    sh "docker push ${QUAY_REGISTRY}:${TAG_NAME}"
                }
            }
        }

        stage('Check Docker Image Vulnerabilities') {
            steps {
                script {
                    // Get image digest
                    def imageDigest = sh(script: "skopeo inspect docker://${QUAY_REGISTRY}:${TAG_NAME} | jq -r .Digest", returnStdout: true).trim()
		    // Initialize variables
                    def reportStatus = 'queued'

                    // Loop until the vulnerability scanning process is complete
                    while (reportStatus != 'scanned') {
                        // Download vulnerability report JSON
                        sh "curl -o `basename ${IMAGE_NAME}`.json https://quay.io/api/v1/repository/${IMAGE_NAME}/manifest/${imageDigest}/security?vulnerabilities=true"

                        // Check the status from the downloaded JSON
                        reportStatus = sh(script: "jq -r .status `basename ${IMAGE_NAME}`.json", returnStdout: true).trim()

                        // Wait for a specific duration before checking again
                        sleep 60  // Adjust the duration as needed
                    }

                    // Check vulnerabilities and take action
                   // def highSeverityVulnerabilities = sh(script: "jq '.data.Layer.Features[] | select(.Vulnerabilities[]?.Severity == \"High\")' `basename ${IMAGE_NAME}`.json", returnStatus: true)
		      def mediumVulnerabilities = sh(script: "jq '.data.Layer.Features[]' `basename ${IMAGE_NAME}`.json | jq -c '{\"Name\":.Name,\"Version\":.Version,\"Advisory\":.Vulnerabilities[]} | select(.Advisory.Severity==\"Medium\") | {\"Advisory\":.Advisory.Name,\"Link\":.Advisory.Link,\"PACKAGE\":.Name,\"CURRENT VERSION\":.Version,\"FIXED IN VERSION\":.Advisory.FixedBy }'", returnStdout: true).trim()
                    if (mediumVulnerabilities) {
			echo "Medium vulnerabilities found. Deleting the image from the quay.io repository and stopping the pipeline."
			echo "$mediumVulnerabilities"
			// Delete the image from quay.io repository
                        sh "skopeo delete docker://${QUAY_REGISTRY}:${TAG_NAME}"
                        // Stop the pipeline
                        //error "High severity vulnerabilities found. Pipeline stopped."
                    } else {
                        echo "No high severity vulnerabilities found. Continuing to deployment stage."
                    }
                }
            }
        }
    }
}
