pipeline {
    agent any

    environment {
        IMAGE_NAME = 'cloudbeeci/simple-java-app'
        TAG_NAME = 'V1.0.0'
        QUAY_REGISTRY = 'quay.io/cloudbeeci/simple-java-app'
	K8S_NAMESPACE = 'cloudbeesci-java-app'
	AWS_REGION = 'us-east-1'
        CLUSTER_ACCESSKEY = credentials('CLUSTER_ACCESSKEY')
        CLUSTER_SECRETKEY = credentials('CLUSTER_SECRETKEY')
        CLUSTER_NAME = 'cloudbeesci.k8s.local'
	S3_BUCKET_NAME = 's3://javamicroservices.k8s.local'
    }

    stages {
        stage('Maven Package') {
            steps {
                script {
                    sh "mvn clean package"
                    sh 'mv target/myweb*.war target/newapp.war'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -f Dockerfile-app -t ${IMAGE_NAME}:${TAG_NAME} ."
                }
            }
        }

        stage('Login to Quay.io Repository') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'QuayRepo', usernameVariable: 'QUAY_USERNAME', passwordVariable: 'QUAY_PASSWORD')]) {
                        sh "echo ${QUAY_PASSWORD} | docker login --username ${QUAY_USERNAME} --password-stdin quay.io"
                    }
		    sh "docker tag ${IMAGE_NAME}:${TAG_NAME} ${QUAY_REGISTRY}:${TAG_NAME}"
                    sh "docker push ${QUAY_REGISTRY}:${TAG_NAME}"
                }
            }
        }

        stage('Check Docker Image Vulnerabilities') {
            steps {
                script {
                    // Get image digest
                    def imageDigest = sh(script: "skopeo inspect docker://${QUAY_REGISTRY}:${TAG_NAME} | jq -r .Digest", returnStdout: true).trim()
		    // Initialize variables
                    def reportStatus = 'queued'

                    // Loop until the vulnerability scanning process is complete
                    while (reportStatus != 'scanned') {
                        // Download vulnerability report JSON
                        sh "curl -o `basename ${IMAGE_NAME}`.json https://quay.io/api/v1/repository/${IMAGE_NAME}/manifest/${imageDigest}/security?vulnerabilities=true"

                        // Check the status from the downloaded JSON
                        reportStatus = sh(script: "jq -r .status `basename ${IMAGE_NAME}`.json", returnStdout: true).trim()

                        // Wait for a specific duration before checking again
                        sleep 60  // Adjust the duration as needed
                    }

                    // Check vulnerabilities and take action
                     def HighVulnerabilities = sh(script: "jq '.data.Layer.Features[]' `basename ${IMAGE_NAME}`.json | jq -c '{\"Name\":.Name,\"Version\":.Version,\"Advisory\":.Vulnerabilities[]} | select(.Advisory.Severity==\"High\") | {\"Advisory\":.Advisory.Name,\"Link\":.Advisory.Link,\"PACKAGE\":.Name,\"CURRENT VERSION\":.Version,\"FIXED IN VERSION\":.Advisory.FixedBy }'", returnStdout: true).trim()
                    if (HighVulnerabilities) {
			echo "High Vulnerabilities found. Deleting the image from the quay.io repository and stopping the pipeline."
			echo "$HighVulnerabilities"
			// Delete the image from quay.io repository
                        //sh "skopeo delete docker://${QUAY_REGISTRY}:${TAG_NAME}"
                        // Stop the pipeline
                        //error "High severity vulnerabilities found. Pipeline stopped."
                    } else {
                        echo "No high severity vulnerabilities found. Continuing to deployment stage."
                    }
                }
            }
        }
	stage('Connect to cluster and deploy container image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'CLUSTER_ACCESSKEY', usernameVariable: 'AWS_ACCESS_KEY_USERNAME', passwordVariable: 'AWS_ACCESS_KEY_PASSWORD'),
                                     usernamePassword(credentialsId: 'CLUSTER_SECRETKEY', usernameVariable: 'AWS_SECRET_ACCESS_KEY_USERNAME', passwordVariable: 'AWS_SECRET_ACCESS_KEY_PASSWORD' ),
				     usernamePassword(credentialsId: 'AWS_REGION', usernameVariable: 'AWS_REGION_USERNAME', passwordVariable: 'AWS_REGION_PASSWORD' )]) {
                        sh "aws configure set aws_access_key_id $AWS_ACCESS_KEY_PASSWORD"
                        sh "aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_PASSWORD"
                        sh "aws configure set region $AWS_REGION_PASSWORD"
			sh "kops export kubecfg --name $CLUSTER_NAME --state $S3_BUCKET_NAME"
			sh "kubectl apply -f ./deployment.yml"
		    	sh "echo deployed to EKS cluster"
                    }
                }
            }
	}
	 //stage('Update kubeconfig') {
           // steps {
              //  script {
               //     sh "kops export kubecfg --name $CLUSTER_NAME --state $S3_BUCKET_NAME"
               // }
          //  }
        //}
        //stage('Apply deployment manifest') {
          //  steps {
            //    script {
		
              //      sh "kubectl apply -f ./deployment.yml"
		//    sh "echo deployed to EKS cluster"
               // }
           // }
       // }
	stage('Check deployment status') {
            steps {
                script {
                    sh "kubectl get deployments"
                    sh "kubectl get pods"
                    sh "kubectl get services"
                    sh "kubectl describe pods"
                }
            }
        }
    }
}
